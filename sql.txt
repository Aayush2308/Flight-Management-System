--Create queries
-- create database Project;
use Project;
create table Facility(
	facilityId int Primary Key,
    facilityType varchar(20)
);
Create table Terminal(
	terminalNumber int primary key,
    facilityId int,
    foreign key (facilityId) references Facility(facilityId)
    on delete cascade on update cascade
);
create table Runway( --
	runwayNumber int primary key,
    facilityId int,
    foreign key (facilityId) references Facility(facilityId)
    on delete cascade on update cascade
);
create table Gate( --
	gateNumber int primary key,
    facilityId int,
    foreign key (facilityId) references Facility(facilityId)
    on delete cascade on update cascade
);
create table Records( --
	recordId int primary key Auto_Increment
);
create table Passenger( --
	recordId int,
    ticketNumber varchar(50) primary key,
    passportNumber varchar(50),
    name varchar(100),
    contactNumber varchar(20),
    foreign key (recordId) references Records(recordId)
    on delete cascade on update cascade
);
create table Admin( --
	adminId int auto_increment primary key,
    name varchar(30),
    password varchar(255),
    email varchar(30),
    contactNumber varchar(30)
);
create table Account( --
	accountId int auto_increment primary key,
    adminId int,
    email varchar(30),
    password varchar(255),
    foreign key (adminId) references Admin(adminId)
    on delete cascade on update cascade
);
create table SearchRequest( --
	requestId int primary key,
    searchText varchar(30)
);
create table Luggage( --
	serialNumber int auto_increment primary key,
    ticketNumber varchar(50),
    noOfItems int,
    weightOfItems float,
    foreign key (ticketNumber) references Passenger(ticketNumber)
    on delete cascade on update cascade
);
create table Revenue( --
	transactionId int primary key,
    amount float,
    paymentType varchar(10),
    ticketNumber varchar(10),
    foreign key (ticketNumber) references Passenger(ticketNumber)
    on delete cascade on update cascade
);
create table Airlines( --
	iataCode varchar(10) primary key,
    nameOfAirline varchar(100),
    email varchar(100),
    headquarter varchar(100)
);
create table Flight( --
	flightId int primary key,
    runwayNumber int,
    iadaNumber varchar(10),
    source varchar(100),
    destination varchar(100),
    foreign key (runwayNumber) references Runway(runwayNumber)
    on delete cascade on update cascade
);
create table FlightSchedule( --
	flightId int primary key,
    terminalNumber int not null,
    gateNumber int not null,
    runwayNumber int not null,
    airlineIataCode varchar(10) not null,
    arrivalTime time not null,
    arrivalDate date not null,
    departureTime time not null,
    departureDate date not null,
    delay time default '00:00:00',
    origin varchar(20) not null,
    destination varchar(20) not null,
    status ENUM('On Time','Delayed','Cancelled') default 'On Time',
    createdAt timestamp default current_timestamp,
    updatedAt timestamp default current_timestamp on update current_timestamp,
    foreign key (terminalNumber) references Terminal(terminalNumber)
    on delete cascade on update cascade,
    foreign key (runwayNumber) references Runway(runwayNumber)
    on delete cascade on update cascade,
    foreign key (gateNumber) references Gate(gateNumber)
    on delete cascade on update cascade,
    foreign key (airlineIataCode) references Airlines(iataCode)
    on delete cascade on update cascade
);
create table Employee( --
    employeeId int primary key auto_increment,
    employeeName varchar(30),
    role varchar(30),
    recordId int,
    foreign key(recordId) references Records(recordId)
    on delete cascade on update cascade
);
create table Security( --
	employeeId int,
    employeeName varchar(30),
    facilityId int,
    recordId int,
    foreign key (employeeId) references Employee(employeeId)
    on delete cascade on update cascade,
	FOREIGN KEY (recordId) REFERENCES Records(recordId)
    on delete cascade on update cascade,
    FOREIGN KEY (facilityId) REFERENCES Facility(facilityId)
    on delete cascade on update cascade
);
CREATE TABLE GroundStaff ( --
    employeeId INT,
    employeeName VARCHAR(30),
    facilityId INT,
    recordId INT,
    FOREIGN KEY (employeeId) REFERENCES Employee(employeeId)
    on delete cascade on update cascade,
    FOREIGN KEY (recordId) REFERENCES Records(recordId)
    on delete cascade on update cascade,
    FOREIGN KEY (facilityId) REFERENCES Facility(facilityId)
    on delete cascade on update cascade
);
CREATE TABLE CabinCrew ( --
    employeeId INT,
    employeeName VARCHAR(30),
    recordId INT,
    flightId INT,
    facilityId INT,
    FOREIGN KEY (employeeId) REFERENCES Employee(employeeId)
    on delete cascade on update cascade,
    FOREIGN KEY (recordId) REFERENCES Records(recordId)
    on delete cascade on update cascade,
    FOREIGN KEY (flightId) REFERENCES FlightSchedule(flightId)
    on delete cascade on update cascade,
    FOREIGN KEY (facilityId) REFERENCES Facility(facilityId)
    on delete cascade on update cascade
);
CREATE TABLE Pilot ( --
    employeeId INT,
    employeeName VARCHAR(30),
    recordId INT,
    flightId INT,
    facilityId INT,
    FOREIGN KEY (employeeId) REFERENCES Employee(employeeId)
    on delete cascade on update cascade,
    FOREIGN KEY (recordId) REFERENCES Records(recordId)
    on delete cascade on update cascade,
    FOREIGN KEY (flightId) REFERENCES FlightSchedule(flightId)
    on delete cascade on update cascade,
    FOREIGN KEY (facilityId) REFERENCES Facility(facilityId)
    on delete cascade on update cascade
);
Create Table Allotment( --
	allotmentId int primary key auto_increment,
	ticketNumber varchar(50),
	flightId int,
	Foreign key (flightId) references Flight(flightId)
    on delete cascade on update cascade,
	Foreign key (ticketNumber) references Passenger(ticketNumber)
    on delete cascade on update cascade
);


--Insert queries
 -- 1. Facility 
INSERT INTO Facility (facilityId, facilityType) VALUES
(1, 'Runway'),
(2, 'Gate'),
(3, 'Terminal'),
(4, 'Security'),
(5, 'Lounge');

-- 2. Records 
INSERT INTO Records (recordId) VALUES
(1), (2), (3), (4), (5), (6),
(7),(8),(9),(10),(11),(12),(13),(14),
(15),
(16),
(17),
(18),
(19),
(20),
(21),
(22),
(23),
(24),
(25);



//will have to create a new account in application
-- 3. Admin
INSERT INTO Admin (name, password, email, contactNumber) VALUES
('Alice Johnson', 'alice123', 'alice@example.com', '9876543210'),
('Bob Smith', 'bobpass', 'bob@example.com', '9876501234'),
('Carol White', 'carol321', 'carol@example.com', '9876567890'),
('David Brown', 'david999', 'david@example.com', '9876523456'),
('Eva Green', 'eva007', 'eva@example.com', '9876587654');


-- 4. Airlines 
INSERT INTO Airlines (iataCode, nameOfAirline, email, headquarter) VALUES
('AI', 'Air India', 'contact@airindia.in', 'Delhi'),
('IN', 'IndiGo', 'support@goindigo.in', 'Gurgaon'),
('SP', 'SpiceJet', 'hello@spicejet.com', 'Gurgaon'),
('VI', 'Vistara', 'service@vistara.com', 'Delhi'),
('AK', 'AirAsia India', 'care@airasia.co.in', 'Bangalore');

-- 5. Terminal 
INSERT INTO Terminal (terminalNumber, facilityId) VALUES
(1, 3), (2, 3), (3, 3), (4, 3), (5, 3);

-- 6. Runway 
INSERT INTO Runway (runwayNumber, facilityId) VALUES
(1, 1), (2, 1), (3, 1), (4, 1), (5, 1);

-- 7. Gate 
INSERT INTO Gate (gateNumber, facilityId) VALUES
(101, 2), (102, 2), (103, 2), (104, 2), (105, 2);

-- 8. Passenger 
INSERT INTO Passenger (recordId, ticketNumber, passportNumber, name, contactNumber) VALUES
(21, 'TICK001', 'P1234567', 'John Doe', '1234567890'),
(22, 'TICK002', 'P2345678', 'Jane Smith', '0987654321'),
(23, 'TICK003', 'P3456789', 'Alice Brown', '1122334455'),
(24, 'TICK004', 'P4567890', 'Bob White', '6677889900'),
(25, 'TICK005', 'P5678901', 'Charlie Black', '9988776655');


-- 9. Account 
INSERT INTO Account (adminId, email, password) VALUES
(1, 'alice@example.com', 'alice123'),
(2, 'bob@example.com', 'bobpass'),
(3, 'carol@example.com', 'carol321'),
(4, 'david@example.com', 'david999'),
(5, 'eva@example.com', 'eva007');



-- 10. SearchRequest 
INSERT INTO SearchRequest (requestId, searchText) VALUES
(1, 'Flights to Delhi'),
(2, 'Air India schedule'),
(3, 'Runway availability'),
(4, 'Gate 101 flights'),
(5, 'Passenger TICK002');

-- 11. Luggage 
INSERT INTO Luggage (ticketNumber, noOfItems, weightOfItems) VALUES
('TICK001', 2, 23.5),
('TICK002', 1, 15.0),
('TICK003', 3, 30.2),
('TICK004', 2, 20.0),
('TICK005', 1, 18.9);

-- 12. Revenue
INSERT INTO Revenue (transactionId, amount, paymentType, ticketNumber) VALUES
(1, 5500.00, 'Card', 'TICK001'),
(2, 4800.00, 'UPI', 'TICK002'),
(3, 6100.00, 'Cash', 'TICK003'),
(4, 7000.00, 'Card', 'TICK004'),
(5, 4500.00, 'UPI', 'TICK005');

-- 13. Flight 
INSERT INTO Flight (flightId, runwayNumber, iadaNumber, source, destination) VALUES
(1001, 1, 'DEL001', 'Delhi', 'Mumbai'),
(1002, 2, 'BLR002', 'Bangalore', 'Chennai'),
(1003, 3, 'HYD003', 'Hyderabad', 'Pune'),
(1004, 4, 'CCU004', 'Kolkata', 'Delhi'),
(1005, 5, 'MAA005', 'Chennai', 'Goa');

-- 14. FlightSchedule (5 rows)
INSERT INTO FlightSchedule (
  flightId, terminalNumber, gateNumber, runwayNumber, airlineIataCode,
  arrivalTime, arrivalDate, departureTime, departureDate, delay, origin, destination, status
) VALUES
(1001, 1, 101, 1, 'AI', '12:00:00', '2025-04-10', '14:00:00', '2025-04-10', '00:15:00', 'Delhi', 'Mumbai', 'Delayed'),
(1002, 2, 102, 2, 'IN', '10:00:00', '2025-04-10', '12:00:00', '2025-04-10', '00:00:00', 'Bangalore', 'Chennai', 'On Time'),
(1003, 3, 103, 3, 'SP', '16:00:00', '2025-04-10', '18:00:00', '2025-04-10', '00:30:00', 'Hyderabad', 'Pune', 'Delayed'),
(1004, 4, 104, 4, 'VI', '08:00:00', '2025-04-10', '10:00:00', '2025-04-10', '00:00:00', 'Kolkata', 'Delhi', 'On Time'),
(1005, 5, 105, 5, 'AK', '20:00:00', '2025-04-10', '22:00:00', '2025-04-10', '00:10:00', 'Chennai', 'Goa', 'On Time');

-- 15. Employee 
INSERT INTO Employee (employeeId, employeeName, role, recordId) VALUES
(1, 'Ravi Kumar', 'Security', 1),
(2, 'Suresh Patel', 'Security', 2),
(3, 'Sunita Rani', 'Security', 3),
(4, 'Manoj Tiwari', 'Security', 4),
(5, 'Kiran Sharma', 'Security', 5),
(6, 'Sara Ali', 'Ground Staff', 6),
(7, 'Priya Nair', 'Ground Staff', 7),
(8, 'Akhil Menon', 'Ground Staff', 8),
(9, 'Sneha Rao', 'Ground Staff', 9),
(10, 'Ramesh Iyer', 'Ground Staff', 10),
(11, 'Amit Singh', 'Cabin Crew', 11),
(12, 'Raj Mehta', 'Cabin Crew', 12),
(13, 'Preeti Sharma', 'Cabin Crew', 13),
(14, 'Ankit Verma', 'Cabin Crew', 14),
(15, 'Ritu Yadav', 'Cabin Crew', 15),
(16, 'Captain Arjun', 'Pilot', 16),
(17, 'Captain Neha', 'Pilot', 17),
(18, 'Captain Sameer', 'Pilot', 18),
(19, 'Captain Kavita', 'Pilot', 19),
(20, 'Captain Rohit', 'Pilot', 20);



-- 16. Security 
INSERT INTO Security (employeeId, employeeName, facilityId, recordId) VALUES
(1, 'Ravi Kumar', 4, 1),
(2, 'Suresh Patel', 4, 2),
(3, 'Sunita Rani', 4, 3),
(4, 'Manoj Tiwari', 4, 4),
(5, 'Kiran Sharma', 4, 5);


-- 17. GroundStaff (5 rows; refer to employees with Ground Staff role: IDs 6-10)
INSERT INTO Groundstaff (employeeId, employeeName, facilityId, recordId) VALUES
(6, 'Sara Ali', 5, 6),
(7, 'Priya Nair', 5, 7),
(8, 'Akhil Menon', 5, 8),
(9, 'Sneha Rao', 5, 9),
(10, 'Ramesh Iyer', 5, 10);


-- 18. CabinCrew 
INSERT INTO Cabincrew (employeeId, employeeName, recordId, flightId, facilityId) VALUES
(11, 'Amit Singh', 11, 1001, 2),
(12, 'Raj Mehta', 12, 1002, 2),
(13, 'Preeti Sharma', 13, 1003, 2),
(14, 'Ankit Verma', 14, 1004, 2),
(15, 'Ritu Yadav', 15, 1005, 2);


-- 19. Pilot 
INSERT INTO Pilot (employeeId, employeeName, recordId, flightId, facilityId) VALUES
(16, 'Captain Arjun Rana', 16, 1001, 2),
(17, 'Captain Neha Kapoor', 17, 1002, 2),
(18, 'Captain Sameer Khan', 18, 1003, 2),
(19, 'Captain Kavita Iyer', 19, 1004, 2),
(20, 'Captain Rohit Das', 20, 1005, 2);


-- 20. Allotment
Insert into Allotment (ticketNumber, flightId) values
('TICK001', 1001),
('TICK002', 1002),
('TICK003', 1003),
('TICK004', 1004),
('TICK005', 1005);





--Triggers
1.Generating Ticket Number
	
CREATE DEFINER=`root`@`localhost` TRIGGER `generateTicketNumber` BEFORE INSERT ON `passenger` FOR EACH ROW BEGIN
DECLARE lastNumber INT DEFAULT 0;
    DECLARE newTicket VARCHAR(50);

    SELECT CAST(SUBSTRING(ticketNumber, 5) AS UNSIGNED)
    INTO lastNumber
    FROM Passenger
    WHERE ticketNumber LIKE 'TICK%'
    ORDER BY recordId DESC
    LIMIT 1;

    SET newTicket = CONCAT('TICK', LPAD(lastNumber + 1, 3, '0'));

    IF NEW.ticketNumber IS NULL THEN
        SET NEW.ticketNumber = newTicket;
    END IF;
END
//Till triggers neccessary to implement.

Passenger Flight Allotment
CREATE TRIGGER PassengerFlightAllotment
AFTER INSERT ON passenger
FOR EACH ROW
BEGIN
    DECLARE rand_flight_id INT;

    -- Get a random flightId from the Flight table
    SELECT flightId INTO rand_flight_id
    FROM Flight
    ORDER BY RAND()
    LIMIT 1;

    -- Insert into the ticket/allotment table
    INSERT INTO Allotment(ticketNumber, flightId)
    VALUES (NEW.ticketNumber, rand_flight_id);
END 

Create Account After Admin Insert
CREATE TRIGGER CreateAccountAfterAdminInsert
AFTER INSERT ON Admin
FOR EACH ROW
BEGIN
    INSERT INTO Account (adminId, email, password)
    VALUES (NEW.adminId, NEW.email, NEW.password);
END






--Functions:
--Some functions for the database

Function to Calculate Revenue Collected by Ticket Number (GetRevenueByTicket)

CREATE DEFINER=`root`@`localhost` FUNCTION `GetRevenueByTicket`(p_ticketNumber VARCHAR(20)) RETURNS int
    DETERMINISTIC
BEGIN
  DECLARE v_amount INT;
  DECLARE v_exists INT;

  SELECT COUNT(*) INTO v_exists
  FROM Revenue
  WHERE ticketNumber = p_ticketNumber;

  IF v_exists = 0 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'Ticket number does not exist in Revenue table.';
  END IF;

  SELECT IFNULL(SUM(amount), 0)
  INTO v_amount
  FROM Revenue
  WHERE ticketNumber = p_ticketNumber;

  RETURN v_amount;
END



Function to Count Total Flights by Airline (CountFlightsByAirline)

CREATE DEFINER=`root`@`localhost` FUNCTION `CountFlightsByAirline`(p_iataCode VARCHAR(10)) RETURNS int
    DETERMINISTIC
BEGIN
  DECLARE v_count INT;

  SELECT COUNT(*)
  INTO v_count
  FROM FlightSchedule
  WHERE airlineIataCode = p_iataCode;

  RETURN v_count;
END


Function to Get Gate Details for a Flight (GetGateNumberForFlight)

CREATE DEFINER=`root`@`localhost` FUNCTION `GetGateNumberForFlight`(p_flightId INT) RETURNS int
    DETERMINISTIC
BEGIN
  DECLARE v_gate INT;
  DECLARE v_exists INT;
  SELECT COUNT(*) INTO v_exists FROM FlightSchedule 
  WHERE flightId = p_flightId;
  IF v_exists = 0 THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 
      'Flight ID does not exist, please enter a valid Flight ID';
  END IF;
  SELECT gateNumber INTO v_gate FROM FlightSchedule
  WHERE flightId = p_flightId LIMIT 1;
  RETURN v_gate;
END



Function to Get Pilot Assigned to a Flight (GetPilotNameByFlight)

CREATE DEFINER=`root`@`localhost` FUNCTION `GetPilotNameByFlight`(p_flightId INT) RETURNS varchar(30) CHARSET utf8mb4
    DETERMINISTIC
BEGIN
  DECLARE v_name VARCHAR(30);

  SELECT employeeName
  INTO v_name
  FROM Pilot
  WHERE flightId = p_flightId
  LIMIT 1;

  RETURN v_name;
END


GetFlightDuration:  Returns the flight duration in minutes using departure and arrival times.
CREATE FUNCTION GetFlightDuration(departureTime DATETIME, arrivalTime DATETIME)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE duration INT;
    SET duration = TIMESTAMPDIFF(MINUTE, departureTime, arrivalTime);
    RETURN duration;
END;





GetPassengerCount:  Returns the number of passengers assigned to a specific flight from the FlightSchedule 
CREATE FUNCTION GetPassengerCount(flightIdParam INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE passenger_count INT;
    SELECT COUNT(*) INTO passenger_count
    FROM FlightSchedule
    WHERE flightId = flightIdParam;
    RETURN passenger_count;
END;


ValidateEmailFormat: Checks if an email is in a valid format using regex.
CREATE FUNCTION ValidateEmailFormat(email VARCHAR(100))
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    RETURN email REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$';
END;



GetTotalLuggageWeight: Returns the total luggage weight for a specific passenger based on ticket number.

CREATE FUNCTION GetTotalLuggageWeight(ticketParam VARCHAR(50))
RETURNS FLOAT
DETERMINISTIC
BEGIN
    DECLARE total_weight FLOAT;
    SELECT SUM(weightOfItems) INTO total_weight
    FROM Luggage
    WHERE ticketNumber = ticketParam;
    RETURN IFNULL(total_weight, 0);
END;

GetTotalRevenueByPassenger: Returns the total amount paid by a specific passenger based on ticket number.


CREATE FUNCTION GetTotalRevenueByPassenger(ticketParam VARCHAR(50))
RETURNS FLOAT
DETERMINISTIC
BEGIN
    DECLARE total_amount FLOAT;
    SELECT SUM(amount) INTO total_amount
    FROM Revenue
    WHERE ticketNumber = ticketParam;
    RETURN IFNULL(total_amount, 0);
END;


IsFlightOverbooked: Checks if a flight is overbooked by comparing bookings to maximum capacity.


CREATE FUNCTION IsFlightOverbooked(flightIdParam INT, maxCapacity INT)
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE bookedCount INT;
    SELECT COUNT(*) INTO bookedCount
    FROM FlightSchedule
    WHERE flightId = flightIdParam;
    RETURN bookedCount > maxCapacity;
END;









--Procedures:
1. GetUpdatedDateTime

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetUpdatedFlightDateTime`()
BEGIN
	 SELECT
        flightId,
        
        DATE_ADD(arrivalDate, INTERVAL 
            FLOOR(TIME_TO_SEC(TIMEDIFF(SEC_TO_TIME(TIME_TO_SEC(arrivalTime) + TIME_TO_SEC(delay)), '00:00:00')) / 86400) DAY
        ) AS newArrivalDate,

        SEC_TO_TIME(
            (TIME_TO_SEC(arrivalTime) + TIME_TO_SEC(delay)) %86400
        ) AS newArrivalTime,

        DATE_ADD(departureDate, INTERVAL 
            FLOOR(TIME_TO_SEC(TIMEDIFF(SEC_TO_TIME(TIME_TO_SEC(departureTime) + TIME_TO_SEC(delay)), '00:00:00')) / 86400) DAY
        ) AS newDepartureDate,

        SEC_TO_TIME(
            (TIME_TO_SEC(departureTime) + TIME_TO_SEC(delay)) % 86400
        ) AS newDepartureTime

    FROM flightSchedule
    WHERE delay IS NOT NULL;
END


2. Registering new employee

CREATE DEFINER=`root`@`localhost` PROCEDURE `RegisterNewEmployee`(
IN p_employeeName VARCHAR(30),
    IN p_role VARCHAR(30),
    IN p_facilityId INT
	)
BEGIN
DECLARE newRecordId INT;
DECLARE newEmployeeId INT;

    -- 1. Insert into Records and get recordId
    INSERT INTO Records () VALUES ();
    SET newRecordId = LAST_INSERT_ID();

    -- 2. Insert into Employee and get employeeId
    INSERT INTO Employee (employeeName, role, recordId)
    VALUES (p_employeeName, p_role, newRecordId);
    SET newEmployeeId = LAST_INSERT_ID();

    -- 3. Insert into respective table based on role
    IF p_role = 'GroundStaff' THEN
	INSERT INTO GroundStaff (employeeId, employeeName, facilityId, recordId)
	VALUES (newEmployeeId, p_employeeName, p_facilityId, newRecordId);
    ELSEIF p_role = 'Security' THEN
	INSERT INTO Security (employeeId, employeeName, facilityId, recordId)
	VALUES (newEmployeeId, p_employeeName, p_facilityId, newRecordId);
    ELSEIF p_role = 'CabinCrew' THEN
	INSERT INTO CabinCrew (employeeId, employeeName, facilityId, recordId)
	VALUES (newEmployeeId, p_employeeName, p_facilityId, newRecordId);
    ELSEIF p_role = 'Pilot' THEN
	INSERT INTO Pilot (employeeId, employeeName, facilityId, recordId)
        VALUES (newEmployeeId, p_employeeName, p_facilityId, newRecordId);
    END IF;

    -- 4. Return new IDs
    SELECT newEmployeeId AS employeeId, newRecordId AS recordId;
END

3. Insert New Passenger

CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertNewPassenger`(
IN p_passportNumber VARCHAR(50),
    IN p_name VARCHAR(100),
    IN p_contactNumber VARCHAR(20)
)
BEGIN
DECLARE newRecordId INT;
    DECLARE lastTicket VARCHAR(50);
    DECLARE lastNumber INT DEFAULT 0;
    DECLARE newTicket VARCHAR(50);

    -- Step 1: Insert into Records table and get new recordId
    INSERT INTO Records () VALUES ();
    SET newRecordId = LAST_INSERT_ID();

    -- Step 2: Get the last ticketNumber from Passenger table
    SELECT ticketNumber
    INTO lastTicket
    FROM Passenger
    WHERE ticketNumber LIKE 'TICK%'
    ORDER BY recordId DESC
    LIMIT 1;

    -- Step 3: Extract number from lastTicket
    IF lastTicket IS NOT NULL THEN
        SET lastNumber = CAST(SUBSTRING(lastTicket, 5) AS UNSIGNED);
    END IF;

    -- Step 4: Create new ticket number
    SET newTicket = CONCAT('TICK', LPAD(lastNumber + 1, 3, '0'));

    -- Step 5: Insert into Passenger table with new recordId and ticketNumber
    INSERT INTO Passenger (recordId, ticketNumber, passportNumber, name, contactNumber)
    VALUES (newRecordId, newTicket, p_passportNumber, p_name, p_contactNumber);

END

4.  Adding new luggage

CREATE DEFINER=`root`@`localhost` PROCEDURE `AddingLuggage`(
	IN p_ticketNumber VARCHAR(50),
    IN p_noOfItems INT,
    IN p_weightOfItems FLOAT
)
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM Passenger WHERE ticketNumber = p_ticketNumber
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Ticket number does not exist in Passenger table.';

    ELSEIF EXISTS (
        SELECT 1 FROM Luggage WHERE ticketNumber = p_ticketNumber
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Luggage already exists for this ticket number.';

    ELSE
        INSERT INTO Luggage (ticketNumber, noOfItems, weightOfItems)
        VALUES (p_ticketNumber, p_noOfItems, p_weightOfItems);
    END IF;
END
